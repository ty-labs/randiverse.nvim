*randiverse.txt*          For NVIM v0.8.0         Last change: 2024 January 23

==============================================================================
Table of Contents                               *randiverse-table-of-contents*

1. randiverse.nvim                                |randiverse-randiverse.nvim|
2. Requirements                                      |randiverse-requirements|
3. Installation                                      |randiverse-installation|
4. Usage                                                    |randiverse-usage|
  - The Basics                                   |randiverse-usage-the-basics|
  - int                                                 |randiverse-usage-int|
  - float                                             |randiverse-usage-float|
  - name                                               |randiverse-usage-name|
  - word                                               |randiverse-usage-word|
  - lorem                                             |randiverse-usage-lorem|
  - country                                         |randiverse-usage-country|
  - datetime                                       |randiverse-usage-datetime|
  - email                                             |randiverse-usage-email|
  - url                                                 |randiverse-usage-url|
  - uuid                                               |randiverse-usage-uuid|
  - ip                                                   |randiverse-usage-ip|
  - hexcolor                                       |randiverse-usage-hexcolor|
5. Configuration                                    |randiverse-configuration|
6. Contributing                                      |randiverse-contributing|
7. Shoutouts                                            |randiverse-shoutouts|

==============================================================================
1. randiverse.nvim                                *randiverse-randiverse.nvim*

Tired of raking your brain trying to generate 'random' text for sample/test
cases (and secretly leaking your life details)?? Randiverse—the "Random
Universe"—is a flexible, configurable nvim plugin that can generate random
text for a variety of scenarios including ints, floats, names, dates, lorem
ipsum, emails, and more! Created by a recent VScode —> NVIM convert and
inspired by the simple, albeit handy, "Random Everything" VScode extension.

**Insert Demo Video Clip Here**

Author: Tyler Lowe <https://github.com/ty-labs>

License: MIT License
<https://github.com/ty-labs/randiverse.nvim/blob/main/LICENSE>


==============================================================================
2. Requirements                                      *randiverse-requirements*

randiverse.nvim was built w/ minimal dependencies using standard Lua and
Neovim:

- Neovim 0.8+ <https://github.com/neovim/neovim/releases>
- Lua 5.1.5+ <>


==============================================================================
3. Installation                                      *randiverse-installation*

Install randiverse.nvim using your favorite plugin manager, then call
`require("randiverse").setup()`


LAZY.NVIM ~

>lua
    {
        "ty-labs/randiverse.nvim",
        version = "*", -- Use for stability; omit to use `main` branch for the latest features
        config = function()
            require("randiverse").setup({
                -- Custom configurations here, or leave empty to use defaults
            })
        end
    }
<


PACKER.NVIM ~

>lua
    use({
        "ty-labs/randiverse.nvim",
        tag = "*", -- Use for stability; omit to use `main` branch for the latest features
        config = function()
            require("randiverse").setup({
                -- Custom configuration here, or leave empty to use defaults
            })
        end
    })
<


==============================================================================
4. Usage                                                    *randiverse-usage*


THE BASICS                                       *randiverse-usage-the-basics*

Generally, the plugin functionality is accessed via the registered editor
command 'Randiverse'. The editor command 'Randiverse' also requires a command
(int, float, name, etc.) with possible command flags which tell Randiverse what
random text to generate. Note that both 'Randiverse' and its commands have
auto-completion as demonstrated below. The Randiverse access pattern will look
like the following:

`:Randiverse <command> <optional command flags>`

**Insert Demo Video (opening and auto-completion features…)**

Command flags can either be short or long hand but are inputted as `flag value`
NOT `flag=value` or simply boolean flag. Each Randiverse command also comes
with a default keymap that is prefixed by `<leader>r...` and maps to the
default random text generation for the command.


INT                                                     *randiverse-usage-int*

`:Randiverse int <optional int flags>`

Picks a random int from within a range. The default range is [1-100].

  --------------------------------------------------------------------------
  Flag               Description                         Value
  ------------------ ----------------------------------- -------------------
  -s/--start start   Set the start for the range.        Integer
                     Example: ‘-s 50’ would change the   
                     range to [50-100].                  

  -l/--stop stop     Set the stop for the range.         Integer
                     Example: ‘-S 70’ would change the   
                     range to [0-70].                    
  --------------------------------------------------------------------------
Default Keymap: `<leader>ri`

**Insert Demo Video**

Configurations:

>lua
    {
        data: {
            int: {
                default_start = <int>, --Configuration here, or leave empty to use default (1)
                default_stop = <int>, --Configuration here, or leave empty to use default (100)
            }
        }
    }
<


FLOAT                                                 *randiverse-usage-float*

`:Randiverse float <optional float flags>`

Picks a random float from within a range. The default range is [1-100] w/ the
output having two decimal places.

  --------------------------------------------------------------------------------
  Flag                     Description                         Value
  ------------------------ ----------------------------------- -------------------
  -s/--start start         Set the start for the range.        Integer
                           Example: ‘-s 50’ would change the   
                           range to [50-100].                  

  -l/--stop stop           Set the stop for the range.         Integer
                           Example: ‘-S 70’ would change the   
                           range to [0-70].                    

  -d/--decimals decimals   Set the # of decimal places in the  Non-negative
                           output. Example: ‘-d 4’ would       Integer
                           change output to xx.xxxx.           
  --------------------------------------------------------------------------------
Default Keymap: `<leader>rf`

**Insert Demo Video**

Configurations:

>lua
    {
        data: {
            int: {
                default_start = <int>, --Configuration here, or leave empty to use default (1)
                default_stop = <int>, --Configuration here, or leave empty to use default (100)
                default_decimals = <int>, -- Configuration here, or leave empty to use default (2)
            }
        }
    }
<


NAME                                                   *randiverse-usage-name*

`:Randiverse name <optional name flags>`

Generates a random name. The default is a full name (first and last) unless
flags are set. The random name is generated via random selection from a static
first + last name corpuses that Randiverse comes bundled with & are
configurable.

  ------------------------------------------------------------------------
  Flag             Description                         Value
  ---------------- ----------------------------------- -------------------
  -f/--first       Return the first name component.    None
                   Example: ’-f would toggle the       
                   output to include a first name      
                   (plus any other toggled             
                   components).                        

  -l/--last        Return the last name component.     None
                   Example: ‘-l’ would toggle the      
                   output to include a last name (plus 
                   any other toggled components).      
  ------------------------------------------------------------------------
Default Keymap: `<leader>rn`

**Insert Demo Video**

Configurations:

>lua
    {
        data: {
            name: {
                FIRST = <file_path>, --Configuration here, or leave empty to use default ('names_first.txt'; path relative from `data.ROOT`)
                LAST = <file_path>, --Configuration here, or leave empty to use default (included 'names_last.txt'; path relative from `data.ROOT`)
            }
        }
    }
<


WORD                                                   *randiverse-usage-word*

`:Randiverse word <optional word flags>`

Generates a random word(s). The default number of returned random words is 1.
The random words are generated via random selection from a corpus. Corpuses are
configured in the `data.word.corpuses` map which maps: corpus name —> corpus
relative path from the `data.ROOT`. By default, Randiverse comes bundled and
configured with a 'short', 'medium', and 'long' corpuses available; 'medium' is
the default corpus for random word generation.

  -------------------------------------------------------------------------------
  Flag                 Description                         Value
  -------------------- ----------------------------------- ----------------------
  -a/--all             Use all of the configured corpuses  None
                       to select a random word. Example:   
                       ‘-a’ would toggle output s.t.       
                       <word> could be from ‘short’,       
                       ‘medium’, or ‘long’ corpus.         

  -c/--corpus corpus   Set the corpus from configured      String; Key in
                       corpuses to select random word      ‘data.word.corpuses’
                       from. Example: ‘-c long’ would      map
                       change output <word> to be from     
                       ‘long’ corpus.                      

  -l/--length length   Set the # of words to return        Positive Integer
                       (separated by spaces). Example:     
                       ‘-l 3’ would change output to       
                       <word> <word> <word> where words    
                       are from the ‘medium’ (default)     
                       corpus.                             
  -------------------------------------------------------------------------------
Default Keymap: `<leader>rn`

**Insert Demo Video**

Configurations:

>lua
    {
        data: {
            word: {
                corpuses = {
                    <corpus_name>: <file_path>, -- Configuration here, or leave empty to use default
                    ...
                },
                default_corpus = <key_in_corpuses>, --Configuration here, or leave empty to use default (included 'medium')
                default_length = <int>, --Configuration here, or leave empty to use default (1)
            }
        }
    }
<


LOREM                                                 *randiverse-usage-lorem*

`:Randiverse lorem <optional lorem flags>`

Generates a block of random lorem ipsum text. The default block has a length of
100 words, 'mixed-short' sentence length ranging from [5, 30] words/sentence,
and a comma probability of 10%. The lorem ipsum block is generated by randomly
selecting words from a corpus. Corpuses are configured in the
`data.lorem.corpuses` map which maps: corpus name —> corpus relative path
from the `data.ROOT`. By default, Randiverse comes bundled and configured with
'lorem' available; 'lorem' is the default corpus for random word generation.
Words up to the specified/default length are included and sentences are created
based on the selected 'sentence-length'. Sentence lengths are configured in the
`data.lorem.sentence_lengths` map which maps: sentence length name —> {
sentences lower bound, sentences upper bound}.

  ------------------------------------------------------------------------------------------
  Flag                   Description                         Value
  ---------------------- ----------------------------------- -------------------------------
  -a/--all               Use all of the configured corpuses  None
                         to select a random word. Example:   
                         ‘-a’ would toggle output s.t.       
                         <word> could be from ‘lorem’        
                         corpus.                             

  -c/--corpus corpus     Set the corpus from configured      String; Key in
                         corpuses to select random word      ‘data.word.corpuses’ map
                         from. Example: ‘-c alt-lorem’ would 
                         change output <word> to be from the 
                         ‘alt-lorem’ corpus.                 

  -l/--length length     Set the # of words to return        Positive Integer
                         (separated by spaces). Example:     
                         ‘-l 200’ would change the output    
                         lorem block to have a length ~200   
                         words.                              

  -C/--comma-property    Set the comma property for the      Decimal [0-1]
                         generated lorem ipsum block. This   
                         is the likelihood that a comma will 
                         occur for each word after 3 words   
                         past last comma/period. Example:    
                         ‘-C 0.5’ would change the           

  -s/--sentence-length   Set the sentence lengths for the    String; Key in
                         lorem ipsum block from configured   ‘data.lorem.sentence_lengths’
                         sentence lengths. Example:          map
                         ‘-s long’ would change the output   
                         lorem ipsum block to have sentences 
                         of length ranging [40-60] words.    
  ------------------------------------------------------------------------------------------
Default Keymap: `<leader>rl`

**Insert Demo Video**

Configurations:

>lua
    {
        data: {
            lorem: {
                corpuses = {
                    <corpus_name>: <file_path>, -- Configuration here, or leave empty to use default
                    ...
                },
                sentence_lengths = {
                    ...
                },
                default_corpus = <key_in_corpuses>, --Configuration here, or leave empty to use default ('medium')
                default_sentence_length = <key_in_sentence_lengths>, --Configuration here, or leave empty to use default ('mixed-short')
                default_comma_property = <decimal>, --Configuration here, or leave empty to use default (0.1)
                default_length = <int>, --Configuration here, or leave empty to use default (1)
            }
        }
    }
<


COUNTRY                                             *randiverse-usage-country*

Dummy Text


DATETIME                                           *randiverse-usage-datetime*

Dummy Text


EMAIL                                                 *randiverse-usage-email*

Dummy Text


URL                                                     *randiverse-usage-url*

Dummy Text


UUID                                                   *randiverse-usage-uuid*

Dummy Text


IP                                                       *randiverse-usage-ip*

Dummy Text


HEXCOLOR                                           *randiverse-usage-hexcolor*

Dummy Text


==============================================================================
5. Configuration                                    *randiverse-configuration*

Dummy Text


==============================================================================
6. Contributing                                      *randiverse-contributing*

I’m always looking for new random text commands to add as well as more flags
and enhancements. Feel free to mark an issue or try handling it yourself!


==============================================================================
7. Shoutouts                                            *randiverse-shoutouts*

- Random Everything <https://github.com/helixquar/randomeverything> —> Original inspiration as a revamped version of the VScode extension.
- Random Text <https://github.com/kimpettersen/random-sublime-text-plugin> —> Sublime random text generator which Random Everything was based on.
- Lorem Ipsum Generator <https://github.com/derektata/lorem.nvim> —> Inspiration for building the Lorem Ipsum generator feature.
- nvim-surround <https://github.com/kylechui/nvim-surround/tree/main> —> General structure for writing nvim plugins.
- If you like this project consider a star <https://github.com/ty-labs/randiverse.nvim/tree/main> to show your support!

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
